
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\002\005" +
    "\000\002\002\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\041\011\000\002\041\012\000\002\041\012\000\002\041" +
    "\013\000\002\042\005\000\002\042\006\000\002\042\006" +
    "\000\002\042\007\000\002\037\012\000\002\037\011\000" +
    "\002\040\014\000\002\040\013\000\002\035\011\000\002" +
    "\035\012\000\002\036\006\000\002\036\005\000\002\036" +
    "\011\000\002\004\011\000\002\010\003\000\002\010\004" +
    "\000\002\010\004\000\002\005\004\000\002\006\006\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\003\000\002\014\004\000\002\014\003\000\002\015" +
    "\005\000\002\015\006\000\002\015\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\033\004\000\002\033\005\000\002" +
    "\033\006\000\002\033\003\000\002\007\006\000\002\007" +
    "\007\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\034\004\000\002\034\003\000\002" +
    "\025\005\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\024\012\006\016\017\022\016\031\005\032" +
    "\021\033\015\035\030\042\007\043\020\001\002\000\016" +
    "\002\ufff9\013\ufff9\015\ufff9\017\ufff9\020\ufff9\040\ufff9\001" +
    "\002\000\010\012\006\016\017\022\034\001\002\000\012" +
    "\012\006\016\017\022\034\031\005\001\002\000\004\012" +
    "\205\001\002\000\050\002\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\007\043\010\044\011\042\013\uffc8\015\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\040\uffc8\001\002\000\004\002\204\001\002\000" +
    "\016\002\ufffe\013\ufffe\015\ufffe\017\ufffe\020\ufffe\040\ufffe" +
    "\001\002\000\016\002\ufff8\013\ufff8\015\ufff8\017\ufff8\020" +
    "\ufff8\040\ufff8\001\002\000\026\012\uffe3\016\uffe3\022\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\177\035\uffe3\042\uffe3\043" +
    "\uffe3\001\002\000\004\012\167\001\002\000\040\002\uffc0" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\161\013\uffc0\015\uffc0\017\uffc0\020\uffc0\023\100\031\uffc0" +
    "\040\uffc0\001\002\000\052\002\uffbf\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\015\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\037\uffbf\040\uffbf\001\002\000\004\014\117" +
    "\001\002\000\004\022\074\001\002\000\024\012\006\016" +
    "\017\022\016\031\005\032\021\033\015\035\030\042\007" +
    "\043\020\001\002\000\016\002\ufffa\013\ufffa\015\ufffa\017" +
    "\ufffa\020\ufffa\040\ufffa\001\002\000\050\002\uffc2\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\040\uffc2\001\002\000\050\002" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\013\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\040\uffc4\001\002" +
    "\000\016\002\ufff6\013\ufff6\015\ufff6\017\ufff6\020\ufff6\040" +
    "\ufff6\001\002\000\026\002\uffcd\004\070\005\036\006\040" +
    "\013\uffcd\015\uffcd\017\uffcd\020\uffcd\031\067\040\uffcd\001" +
    "\002\000\004\012\033\001\002\000\016\002\000\013\000" +
    "\015\000\017\000\020\000\040\000\001\002\000\016\002" +
    "\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\040\ufff7\001\002" +
    "\000\012\012\006\016\017\022\034\031\005\001\002\000" +
    "\052\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\013\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\037\uffc0" +
    "\040\uffc0\001\002\000\010\005\036\006\040\013\037\001" +
    "\002\000\012\012\006\016\017\022\034\031\005\001\002" +
    "\000\004\014\050\001\002\000\012\012\006\016\017\022" +
    "\034\031\005\001\002\000\050\002\uffc9\004\uffc9\005\uffc9" +
    "\006\uffc9\007\043\010\044\011\042\013\uffc9\015\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\040\uffc9\001\002\000\010\012\006\016" +
    "\017\022\034\001\002\000\010\012\006\016\017\022\034" +
    "\001\002\000\010\012\006\016\017\022\034\001\002\000" +
    "\050\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\013\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\040\uffc6" +
    "\001\002\000\050\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\013\uffc7\015\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\040\uffc7\001\002\000\050\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\015\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\040\uffc5\001\002\000\006\036\053\041" +
    "\051\001\002\000\004\037\064\001\002\000\004\015\062" +
    "\001\002\000\010\012\006\016\017\022\034\001\002\000" +
    "\004\037\055\001\002\000\024\012\006\016\017\022\016" +
    "\031\005\032\021\033\015\035\030\042\007\043\020\001" +
    "\002\000\006\015\uffe7\040\057\001\002\000\004\004\060" +
    "\001\002\000\006\036\053\041\051\001\002\000\004\015" +
    "\uffe5\001\002\000\040\002\uffe9\012\006\013\uffe9\015\uffe9" +
    "\016\017\017\uffe9\020\uffe9\022\016\031\005\032\021\033" +
    "\015\035\030\040\uffe9\042\007\043\020\001\002\000\016" +
    "\002\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8\040\uffe8\001" +
    "\002\000\024\012\006\016\017\022\016\031\005\032\021" +
    "\033\015\035\030\042\007\043\020\001\002\000\004\015" +
    "\uffe6\001\002\000\050\002\uffca\004\uffca\005\uffca\006\uffca" +
    "\007\043\010\044\011\042\013\uffca\015\uffca\017\uffca\020" +
    "\uffca\021\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\040\uffca\001\002\000\020\002\uffd0\004\071\013" +
    "\uffd0\015\uffd0\017\uffd0\020\uffd0\040\uffd0\001\002\000\016" +
    "\002\ufffd\013\ufffd\015\ufffd\017\ufffd\020\ufffd\040\ufffd\001" +
    "\002\000\040\002\uffcf\012\006\013\uffcf\015\uffcf\016\017" +
    "\017\uffcf\020\uffcf\022\016\031\005\032\021\033\015\035" +
    "\030\040\uffcf\042\007\043\020\001\002\000\016\002\uffce" +
    "\013\uffce\015\uffce\017\uffce\020\uffce\040\uffce\001\002\000" +
    "\016\002\uffff\013\uffff\015\uffff\017\uffff\020\uffff\040\uffff" +
    "\001\002\000\010\004\076\012\077\023\100\001\002\000" +
    "\016\002\ufffb\013\ufffb\015\ufffb\017\ufffb\020\ufffb\040\ufffb" +
    "\001\002\000\016\002\ufffc\013\ufffc\015\ufffc\017\ufffc\020" +
    "\ufffc\040\ufffc\001\002\000\014\012\006\013\105\016\017" +
    "\022\034\031\005\001\002\000\012\012\006\016\017\022" +
    "\034\031\005\001\002\000\010\004\102\005\036\006\040" +
    "\001\002\000\040\002\uffcc\012\006\013\uffcc\015\uffcc\016" +
    "\017\017\uffcc\020\uffcc\022\016\031\005\032\021\033\015" +
    "\035\030\040\uffcc\042\007\043\020\001\002\000\016\002" +
    "\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb\040\uffcb\001\002" +
    "\000\010\005\036\006\040\013\112\001\002\000\004\014" +
    "\106\001\002\000\024\012\006\016\017\022\016\031\005" +
    "\032\021\033\015\035\030\042\007\043\020\001\002\000" +
    "\004\015\110\001\002\000\040\002\ufff5\012\006\013\ufff5" +
    "\015\ufff5\016\017\017\ufff5\020\ufff5\022\016\031\005\032" +
    "\021\033\015\035\030\040\ufff5\042\007\043\020\001\002" +
    "\000\016\002\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\040" +
    "\ufff4\001\002\000\004\014\113\001\002\000\024\012\006" +
    "\016\017\022\016\031\005\032\021\033\015\035\030\042" +
    "\007\043\020\001\002\000\004\015\115\001\002\000\040" +
    "\002\ufff3\012\006\013\ufff3\015\ufff3\016\017\017\ufff3\020" +
    "\ufff3\022\016\031\005\032\021\033\015\035\030\040\ufff3" +
    "\042\007\043\020\001\002\000\016\002\ufff2\013\ufff2\015" +
    "\ufff2\017\ufff2\020\ufff2\040\ufff2\001\002\000\024\012\006" +
    "\016\017\022\016\031\005\032\021\033\015\035\030\042" +
    "\007\043\020\001\002\000\004\015\121\001\002\000\004" +
    "\042\122\001\002\000\004\012\123\001\002\000\014\012" +
    "\006\016\017\021\133\022\034\031\005\001\002\000\010" +
    "\013\uffd1\017\uffd1\020\uffd1\001\002\000\006\013\154\017" +
    "\155\001\002\000\010\013\uffdd\017\uffdd\020\152\001\002" +
    "\000\010\013\uffdb\017\uffdb\020\uffdb\001\002\000\032\005" +
    "\036\006\040\013\uffcd\017\uffcd\020\uffcd\021\141\024\137" +
    "\025\140\026\142\027\135\030\136\031\067\001\002\000" +
    "\010\013\uffd9\017\uffd9\020\uffd9\001\002\000\010\013\uffd6" +
    "\017\uffd6\020\uffd6\001\002\000\014\012\006\016\017\021" +
    "\133\022\034\031\005\001\002\000\010\013\uffda\017\uffda" +
    "\020\uffda\001\002\000\012\012\006\016\017\022\034\031" +
    "\005\001\002\000\012\012\006\016\017\022\034\031\005" +
    "\001\002\000\012\012\006\016\017\022\034\031\005\001" +
    "\002\000\012\012\006\016\017\022\034\031\005\001\002" +
    "\000\004\024\144\001\002\000\012\012\006\016\017\022" +
    "\034\031\005\001\002\000\014\005\036\006\040\013\uffd4" +
    "\017\uffd4\020\uffd4\001\002\000\012\012\006\016\017\022" +
    "\034\031\005\001\002\000\014\005\036\006\040\013\uffd7" +
    "\017\uffd7\020\uffd7\001\002\000\014\005\036\006\040\013" +
    "\uffd5\017\uffd5\020\uffd5\001\002\000\014\005\036\006\040" +
    "\013\uffd8\017\uffd8\020\uffd8\001\002\000\014\005\036\006" +
    "\040\013\uffd2\017\uffd2\020\uffd2\001\002\000\014\005\036" +
    "\006\040\013\uffd3\017\uffd3\020\uffd3\001\002\000\014\012" +
    "\006\016\017\021\133\022\034\031\005\001\002\000\010" +
    "\013\uffdc\017\uffdc\020\uffdc\001\002\000\004\004\157\001" +
    "\002\000\014\012\006\016\017\021\133\022\034\031\005" +
    "\001\002\000\010\013\uffde\017\uffde\020\152\001\002\000" +
    "\040\002\uffea\012\006\013\uffea\015\uffea\016\017\017\uffea" +
    "\020\uffea\022\016\031\005\032\021\033\015\035\030\040" +
    "\uffea\042\007\043\020\001\002\000\016\002\uffeb\013\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\040\uffeb\001\002\000\014\012" +
    "\006\013\163\016\017\022\034\031\005\001\002\000\010" +
    "\005\036\006\040\013\165\001\002\000\020\002\ufff1\004" +
    "\164\013\ufff1\015\ufff1\017\ufff1\020\ufff1\040\ufff1\001\002" +
    "\000\016\002\uffef\013\uffef\015\uffef\017\uffef\020\uffef\040" +
    "\uffef\001\002\000\020\002\ufff0\004\166\013\ufff0\015\ufff0" +
    "\017\ufff0\020\ufff0\040\ufff0\001\002\000\016\002\uffee\013" +
    "\uffee\015\uffee\017\uffee\020\uffee\040\uffee\001\002\000\014" +
    "\012\006\016\017\021\133\022\034\031\005\001\002\000" +
    "\006\013\171\017\155\001\002\000\004\014\172\001\002" +
    "\000\024\012\006\016\017\022\016\031\005\032\021\033" +
    "\015\035\030\042\007\043\020\001\002\000\004\015\174" +
    "\001\002\000\026\012\uffe4\016\uffe4\022\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\042\uffe4\043\uffe4\001\002" +
    "\000\024\012\uffe1\016\uffe1\022\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\035\uffe1\042\uffe1\043\uffe1\001\002\000\024\012\uffe2" +
    "\016\uffe2\022\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\042" +
    "\uffe2\043\uffe2\001\002\000\006\014\201\033\015\001\002" +
    "\000\024\012\uffe0\016\uffe0\022\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\035\uffe0\042\uffe0\043\uffe0\001\002\000\024\012\006" +
    "\016\017\022\016\031\005\032\021\033\015\035\030\042" +
    "\007\043\020\001\002\000\004\015\203\001\002\000\024" +
    "\012\uffdf\016\uffdf\022\uffdf\031\uffdf\032\uffdf\033\uffdf\035" +
    "\uffdf\042\uffdf\043\uffdf\001\002\000\004\002\001\001\002" +
    "\000\014\012\006\016\017\021\133\022\034\031\005\001" +
    "\002\000\006\013\207\017\155\001\002\000\004\014\210" +
    "\001\002\000\024\012\006\016\017\022\016\031\005\032" +
    "\021\033\015\035\030\042\007\043\020\001\002\000\004" +
    "\015\212\001\002\000\040\002\uffec\012\006\013\uffec\015" +
    "\uffec\016\017\017\uffec\020\uffec\022\016\031\005\032\021" +
    "\033\015\035\030\040\uffec\042\007\043\020\001\002\000" +
    "\016\002\uffed\013\uffed\015\uffed\017\uffed\020\uffed\040\uffed" +
    "\001\002\000\010\005\036\006\040\013\215\001\002\000" +
    "\052\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\037\uffc1" +
    "\040\uffc1\001\002\000\050\002\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3\015\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\040\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\036\002\010\004\013\007\030\010\021\017" +
    "\026\024\007\025\023\033\011\034\024\035\022\037\003" +
    "\040\012\041\031\042\025\001\001\000\002\001\001\000" +
    "\004\025\215\001\001\000\012\017\213\024\007\025\023" +
    "\034\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\175\006\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\074" +
    "\001\001\000\036\002\072\004\013\007\030\010\021\017" +
    "\026\024\007\025\023\033\011\034\024\035\022\037\003" +
    "\040\012\041\031\042\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\034\024\007\025\023\034\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\065\025" +
    "\023\034\024\001\001\000\002\001\001\000\010\024\040" +
    "\025\023\034\024\001\001\000\002\001\001\000\004\025" +
    "\046\001\001\000\004\025\045\001\001\000\004\025\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\053\001\001\000\002\001\001\000" +
    "\036\002\055\004\013\007\030\010\021\017\026\024\007" +
    "\025\023\033\011\034\024\035\022\037\003\040\012\041" +
    "\031\042\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\060\001\001\000\002\001\001\000\036\002" +
    "\062\004\013\007\030\010\021\017\026\024\007\025\023" +
    "\033\011\034\024\035\022\037\003\040\012\041\031\042" +
    "\025\001\001\000\002\001\001\000\036\002\064\004\013" +
    "\007\030\010\021\017\026\024\007\025\023\033\011\034" +
    "\024\035\022\037\003\040\012\041\031\042\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\071\004\013\007\030\010\021" +
    "\017\026\024\007\025\023\033\011\034\024\035\022\037" +
    "\003\040\012\041\031\042\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\103\024\007\025\023\034\024" +
    "\001\001\000\012\017\100\024\007\025\023\034\024\001" +
    "\001\000\002\001\001\000\036\002\102\004\013\007\030" +
    "\010\021\017\026\024\007\025\023\033\011\034\024\035" +
    "\022\037\003\040\012\041\031\042\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\002" +
    "\106\004\013\007\030\010\021\017\026\024\007\025\023" +
    "\033\011\034\024\035\022\037\003\040\012\041\031\042" +
    "\025\001\001\000\002\001\001\000\036\002\110\004\013" +
    "\007\030\010\021\017\026\024\007\025\023\033\011\034" +
    "\024\035\022\037\003\040\012\041\031\042\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\113\004" +
    "\013\007\030\010\021\017\026\024\007\025\023\033\011" +
    "\034\024\035\022\037\003\040\012\041\031\042\025\001" +
    "\001\000\002\001\001\000\036\002\115\004\013\007\030" +
    "\010\021\017\026\024\007\025\023\033\011\034\024\035" +
    "\022\037\003\040\012\041\031\042\025\001\001\000\002" +
    "\001\001\000\036\002\117\004\013\007\030\010\021\017" +
    "\026\024\007\025\023\033\011\034\024\035\022\037\003" +
    "\040\012\041\031\042\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\124\013\125" +
    "\014\126\015\130\016\131\017\127\024\007\025\023\033" +
    "\123\034\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\133\015\130" +
    "\016\131\017\127\024\007\025\023\033\123\034\024\001" +
    "\001\000\002\001\001\000\012\017\150\024\007\025\023" +
    "\034\024\001\001\000\012\017\147\024\007\025\023\034" +
    "\024\001\001\000\012\017\146\024\007\025\023\034\024" +
    "\001\001\000\012\017\145\024\007\025\023\034\024\001" +
    "\001\000\002\001\001\000\012\017\142\024\007\025\023" +
    "\034\024\001\001\000\002\001\001\000\012\017\144\024" +
    "\007\025\023\034\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\152\015\130\016\131\017\127\024\007" +
    "\025\023\033\123\034\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\013\155\014\126\015\130\016\131" +
    "\017\127\024\007\025\023\033\123\034\024\001\001\000" +
    "\002\001\001\000\036\002\157\004\013\007\030\010\021" +
    "\017\026\024\007\025\023\033\011\034\024\035\022\037" +
    "\003\040\012\041\031\042\025\001\001\000\002\001\001" +
    "\000\012\017\161\024\007\025\023\034\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\167\013\125\014" +
    "\126\015\130\016\131\017\127\024\007\025\023\033\123" +
    "\034\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\172\004\013\007\030\010\021\017\026\024\007" +
    "\025\023\033\011\034\024\035\022\037\003\040\012\041" +
    "\031\042\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\177\001" +
    "\001\000\002\001\001\000\036\002\201\004\013\007\030" +
    "\010\021\017\026\024\007\025\023\033\011\034\024\035" +
    "\022\037\003\040\012\041\031\042\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\205\013\125\014\126\015\130\016\131\017\127\024\007" +
    "\025\023\033\123\034\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\210\004\013\007\030\010\021" +
    "\017\026\024\007\025\023\033\011\034\024\035\022\037" +
    "\003\040\012\041\031\042\025\001\001\000\002\001\001" +
    "\000\036\002\212\004\013\007\030\010\021\017\026\024" +
    "\007\025\023\033\011\034\024\035\022\037\003\040\012" +
    "\041\031\042\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ASSIGN 
            { parser.Tree.reduce(1,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= IFELSEIF S 
            { parser.Tree.reduce(2,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= UN 
            { parser.Tree.reduce(1,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= EX TER 
            { parser.Tree.reduce(2,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= DTYPE ID TER 
            { parser.Tree.reduce(3,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= DTYPE ASSIGN 
            { parser.Tree.reduce(2,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= SWITCHCASE 
            { parser.Tree.reduce(1,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= WHILELOOP 
            { parser.Tree.reduce(1,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= DOWHILE 
            { parser.Tree.reduce(1,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= FUNCDEFINITION 
            { parser.Tree.reduce(1,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= FUNCALL 
            { parser.Tree.reduce(1,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCDEFINITION ::= DTYPE ID LP RP LCB S RCB 
            { parser.Tree.reduce(7,"FUNCDEFINITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFINITION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCDEFINITION ::= DTYPE ID LP RP LCB S RCB S 
            { parser.Tree.reduce(8,"FUNCDEFINITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFINITION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCDEFINITION ::= DTYPE ID LP EX RP LCB S RCB 
            { parser.Tree.reduce(8,"FUNCDEFINITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFINITION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCDEFINITION ::= DTYPE ID LP EX RP LCB S RCB S 
            { parser.Tree.reduce(9,"FUNCDEFINITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFINITION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCALL ::= ID LP RP 
            { parser.Tree.reduce(3,"FUNCALL",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCALL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCALL ::= ID LP EX RP 
            { parser.Tree.reduce(4,"FUNCALL",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCALL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCALL ::= ID LP RP TER 
            { parser.Tree.reduce(4,"FUNCALL",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCALL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCALL ::= ID LP EX RP TER 
            { parser.Tree.reduce(5,"FUNCALL",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCALL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // WHILELOOP ::= WHILE LP CC3 RP LCB S RCB S 
            { parser.Tree.reduce(8,"WHILELOOP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILELOOP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // WHILELOOP ::= WHILE LP CC3 RP LCB S RCB 
            { parser.Tree.reduce(7,"WHILELOOP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILELOOP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DOWHILE ::= DO LCB S RCB WHILE LP CC3 RP TER S 
            { parser.Tree.reduce(10,"DOWHILE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DOWHILE ::= DO LCB S RCB WHILE LP CC3 RP TER 
            { parser.Tree.reduce(9,"DOWHILE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCHCASE ::= SWCH LP EX RP LCB CASE1 RCB 
            { parser.Tree.reduce(7,"SWITCHCASE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCHCASE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCHCASE ::= SWCH LP EX RP LCB CASE1 RCB S 
            { parser.Tree.reduce(8,"SWITCHCASE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCHCASE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASE1 ::= CASE F COLON S 
            { parser.Tree.reduce(4,"CASE1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASE1 ::= DEFAULT COLON S 
            { parser.Tree.reduce(3,"CASE1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASE1 ::= CASE F COLON S BREAK TER CASE1 
            { parser.Tree.reduce(7,"CASE1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IFSTATEMENT ::= IF LP CC3 RP LCB S RCB 
            { parser.Tree.reduce(7,"IFSTATEMENT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IFELSEIF ::= IFSTATEMENT 
            { parser.Tree.reduce(1,"IFELSEIF",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFELSEIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFELSEIF ::= IFSTATEMENT ELSEIF 
            { parser.Tree.reduce(2,"IFELSEIF",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFELSEIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFELSEIF ::= IFSTATEMENT IFELSE 
            { parser.Tree.reduce(2,"IFELSEIF",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFELSEIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSEIF ::= ELSE IFSTATEMENT 
            { parser.Tree.reduce(2,"ELSEIF",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFELSE ::= ELSE LCB S RCB 
            { parser.Tree.reduce(4,"IFELSE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CC3 ::= CC3 OR CC2 
            { parser.Tree.reduce(3,"CC3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CC3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CC3 ::= CC2 
            { parser.Tree.reduce(1,"CC3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CC3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CC2 ::= CC2 AND CC1 
            { parser.Tree.reduce(3,"CC2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CC2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CC2 ::= CC1 
            { parser.Tree.reduce(1,"CC2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CC2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CC1 ::= NOT CC1 
            { parser.Tree.reduce(2,"CC1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CC1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CC1 ::= COND2 
            { parser.Tree.reduce(1,"CC1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CC1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND2 ::= EX EQ EX 
            { parser.Tree.reduce(3,"COND2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND2 ::= EX NOT EQ EX 
            { parser.Tree.reduce(4,"COND2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND2 ::= COND1 
            { parser.Tree.reduce(1,"COND2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND1 ::= EX GT EX 
            { parser.Tree.reduce(3,"COND1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND1 ::= EX LT EX 
            { parser.Tree.reduce(3,"COND1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND1 ::= EX GTE EX 
            { parser.Tree.reduce(3,"COND1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND1 ::= EX LTE EX 
            { parser.Tree.reduce(3,"COND1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COND1 ::= UN 
            { parser.Tree.reduce(1,"COND1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // UN ::= EX UNARY 
            { parser.Tree.reduce(2,"UN",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // UN ::= EX UNARY TER 
            { parser.Tree.reduce(3,"UN",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // UN ::= EX UNARY TER S 
            { parser.Tree.reduce(4,"UN",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // UN ::= EX 
            { parser.Tree.reduce(1,"UN",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASSIGN ::= ID ASS EX TER 
            { parser.Tree.reduce(4,"ASSIGN",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASSIGN ::= ID ASS EX TER S 
            { parser.Tree.reduce(5,"ASSIGN",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EX ::= EX PLUS T 
            { parser.Tree.reduce(3,"EX",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EX",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EX ::= EX MINUS T 
            { parser.Tree.reduce(3,"EX",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EX",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EX ::= T 
            { parser.Tree.reduce(1,"EX",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EX",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // T ::= T MUL F 
            { parser.Tree.reduce(3,"T",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // T ::= T DIV F 
            { parser.Tree.reduce(3,"T",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T ::= T MOD F 
            { parser.Tree.reduce(3,"T",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= UN2 
            { parser.Tree.reduce(1,"T",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // UN2 ::= UNARY F 
            { parser.Tree.reduce(2,"UN2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UN2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // UN2 ::= F 
            { parser.Tree.reduce(1,"UN2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UN2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // F ::= LP EX RP 
            { parser.Tree.reduce(3,"F",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // F ::= ID 
            { parser.Tree.reduce(1,"F",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // F ::= NUMB 
            { parser.Tree.reduce(1,"F",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
